// Generated by CoffeeScript 2.3.2
// skp-sensors.coffee:
// - list all sonsors from sk pulse

var https, mapVisible, parameterChanged, toggleMap, vue;

https = require('https');

mapVisible = false;

toggleMap = function() {
  var el;
  mapVisible = !mapVisible;
  el = document.getElementById('map-id');
  if (mapVisible) {
    return el.style.display = 'block';
  } else {
    return el.style.display = 'none';
  }
};

parameterChanged = function(val) {
  console.log(`parameter changed to ${val}`);
  return vue.parameter = val;
};

vue = new Vue({
  el: '#app',
  data: {
    parameter: "pm10",
    CITY: 'skopje',
    UNAMEPW: (new Buffer("atonevski:pv1530kay")).toString('base64'),
    center: {
      lat: 41.99249998,
      lng: 21.42361109
    },
    map: null,
    sensors: [],
    sensorType: {
      "0": 'MOEPP measurement station',
      "1": 'SkopjePulse LoRaWAN based sensor, version 1',
      "2": 'SkopjePulse WiFi based sensor, version 1',
      "3": 'pulse.eco WiFi based sensor, version 2'
    },
    statusDesc: {
      "ACTIVE": 'The sensor is up and running properly',
      "INACTIVE": 'The sensor is registered but turned off and ignored',
      "NOT_CLAIMED": 'The sensor is registered, but so far not bound to an owner',
      "BANNED": 'The sensor is manually removed from evidence in order to keep data sanity'
    },
    valueType: ['pm10', 'pm25', 'temperature', 'humidity', 'noise']
  },
  methods: {
    toDtm: function(d) {
      var dd, re, s, ymd;
      if (!(d instanceof Date)) {
        throw `${d} is not Date()`;
      }
      dd = new Date(d - d.getTimezoneOffset() * 1000 * 60);
      ymd = dd.toISOString().slice(0, 10);
      re = /(\d\d:\d\d:\d\d) GMT([-+]\d+)/gm;
      s = re.exec(d.toString());
      return `${ymd}T${s[1]}${s[2].slice(0, 3)}:${s[2].slice(3, 5)}`;
    },
    prepareMap: function() {
      this.map = L.map('map-id').setView([this.center.lat, this.center.lng], 12);
      // L.tileLayer 'http://{s}.tile.osm.org/{z}/{x}/{y}.png', {}
      return L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {}).addTo(this.map);
    },
    //     retrieveSensors: () ->
    //       to    = new Date()
    //       from  = new Date(to - 1*60*60*1000)
    //       opts =
    //         hostname: "#{ @CITY }.pulse.eco"
    //         path: "/rest/dataRaw?sensorId=#{ encodeURIComponent @sensors[1].sensorId }&" +
    //               "type=#{ @parameter }&" +
    //               "from=#{ encodeURIComponent @toDtm(from) }&" +
    //               "to=#{ encodeURIComponent @toDtm(to) }"
    //         port: 443
    //         headers:
    //           Authorization: 'Basic ' + @UNAMEPW

    //       console.log opts.headers.Authorize
    //       console.log "https://#{ opts.hostname }#{ opts.path }"

    //       https.get opts, (res) =>
    //         body = ''
    //         res.on 'data', (d) -> body += d
    //         res.on 'error', (e) -> console.log "retrieveSensors(): #{ e }"
    //         res.on 'end', () =>
    //           measurements = JSON.parse body
    //           console.log measurements
    retrieveSensors: function() {
      var i, len, ref, results, sen;
      ref = this.sensors;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        sen = ref[i];
        results.push(((sen) => {
          var from, opts, to;
          to = new Date();
          from = new Date(to - 1 * 60 * 60 * 1000);
          opts = {
            hostname: `${this.CITY}.pulse.eco`,
            path: `/rest/dataRaw?sensorId=${encodeURIComponent(sen.sensorId)}&` + `type=${this.parameter}&` + `from=${encodeURIComponent(this.toDtm(from))}&` + `to=${encodeURIComponent(this.toDtm(to))}`,
            port: 443,
            headers: {
              Authorization: 'Basic ' + this.UNAMEPW
            }
          };
          return https.get(opts, (res) => {
            var body;
            body = '';
            res.on('data', (d) => {
              return body += d;
            });
            res.on('error', (e) => {
              return console.log(`retrieveSensors(): ${e}`);
            });
            return res.on('end', () => {
              var lastm, meas;
              meas = JSON.parse(body);
              if (meas.length === 0) {
                return;
              }
              lastm = meas.slice(-1)[0];
              sen.parameter = lastm.type;
              sen.value = lastm.value;
              sen.stamp = lastm.stamp;
              return this.addSensorMarker(sen);
            });
          });
        })(sen));
      }
      return results;
    },
    addSensorMarker: function(s) { // singular
      var lat, lng, marker;
      [lat, lng] = s.position.split(',').map(function(x) {
        return parseFloat(x);
      });
      return marker = L.marker([lat, lng]).addTo(this.map).bindPopup(`<table class='table-smaller-font'>\n  <tbody>\n  <tr>\n    <th class='right'>Id</th>\n    <td class='with-padding'>${s.sensorId}</td>\n  </tr>\n  <tr>\n    <th class='right'>Sensor</th>\n    <td class='with-padding'>${s.description}</td>\n  </tr>\n  <tr>\n    <th class='right'>Position</th>\n    <td class='with-padding'>${s.position}</td>\n  </tr>\n  <tr>\n    <th class='right'>Type</th>\n    <td class='with-padding'>${this.sensorType[s.type]}</td>\n  </tr>\n  <tr>\n    <th class='right'>Status</th>\n    <td class='with-padding'>${s.status}</td>\n  </tr>\n  <tr>\n    <th class='right'>Stamp</th>\n    <td class='with-padding'>${s.stamp}</td>\n  </tr>\n  <tr>\n    <th class='right'>Parameter</th>\n    <td class='with-padding'>${s.parameter}</td>\n  </tr>\n  <tr>\n    <th class='right'>Value</th>\n    <td class='with-padding'>${s.value}</td>\n  </tr>\n  </tbody>\n</table>`).on('click', (e) => {
        return this.openPopup;
      });
    },
    addSensorMarkers: function() {
      var i, lat, len, lng, marker, ref, results, s;
      ref = this.sensors;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        s = ref[i];
        [lat, lng] = s.position.split(',').map(function(x) {
          return parseFloat(x);
        });
        results.push(marker = L.marker([lat, lng]).addTo(this.map).bindPopup(`<table class='table-smaller-font'>\n  <tbody>\n  <tr>\n    <th class='right'>Id</th>\n    <td class='with-padding'>${s.sensorId}</td>\n  </tr>\n  <tr>\n    <th class='right'>Sensor</th>\n    <td class='with-padding'>${s.description}</td>\n  </tr>\n  <tr>\n    <th class='right'>Position</th>\n    <td class='with-padding'>${s.position}</td>\n  </tr>\n  <tr>\n    <th class='right'>Type</th>\n    <td class='with-padding'>${this.sensorType[s.type]}</td>\n  </tr>\n  <tr>\n    <th class='right'>Status</th>\n    <td class='with-padding'>${s.status}</td>\n  </tr>\n  <tr>\n    <th class='right'>Stamp</th>\n    <td class='with-padding'>${s.stamp}</td>\n  </tr>\n  <tr>\n    <th class='right'>Parameter</th>\n    <td class='with-padding'>${s.parameter}</td>\n  </tr>\n  <tr>\n    <th class='right'>Value</th>\n    <td class='with-padding'>${s.value}</td>\n  </tr>\n  </tbody>\n</table>`).on('click', (e) => {
          return this.openPopup;
        }));
      }
      return results;
    },
    getSensors: function() {
      var opts;
      opts = {
        hostname: `${this.CITY}.pulse.eco`,
        port: 443,
        path: '/rest/sensor',
        headers: {
          Authorization: 'Basic ' + this.UNAMEPW
        }
      };
      return https.get(opts, (res) => {
        var body;
        body = '';
        res.on('data', function(d) {
          return body += d;
        });
        res.on('error', function(e) {
          return console.log(`getSensors(): ${e}`);
        });
        return res.on('end', () => {
          this.sensors = JSON.parse(body);
          return this.retrieveSensors();
        });
      });
    }
  },
  // @addSensorMarkers()
  created: function() {
    this.prepareMap();
    return this.getSensors();
  }
});

// https://skopje.pulse.eco/rest/dataRaw?sensorId=7c497bfd-36b6-4eed-9172-37fd70f17c48&type=pm10&from=2019-01-03T06%3A12%3A33%2B01%3A00&to=2019-01-03T07%3A12%3A33%2B01%3A00

// skopje.pulse.eco
// name: sk-pulse
// email: atonevski@gmail.com
// username: atonevski
// password: pv1530kay
