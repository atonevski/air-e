// Generated by CoffeeScript 2.3.2
// skp-sensors.coffee:
// - list all sonsors from sk pulse

var CITY, https, mapVisible, toggleMap, vue;

https = require('https');

CITY = 'skopje';

mapVisible = false;

toggleMap = function() {
  var el;
  mapVisible = !mapVisible;
  el = document.getElementById('map-id');
  if (mapVisible) {
    return el.style.display = 'block';
  } else {
    return el.style.display = 'none';
  }
};

vue = new Vue({
  el: '#app',
  data: {
    parameter: "pm10",
    center: {
      lat: 41.99249998,
      lng: 21.42361109
    },
    map: null,
    sensors: [],
    sensorType: {
      "0": 'MOEPP measurement station',
      "1": 'SkopjePulse LoRaWAN based sensor, version 1',
      "2": 'SkopjePulse WiFi based sensor, version 1',
      "3": 'pulse.eco WiFi based sensor, version 2'
    },
    statusDesc: {
      "ACTIVE": 'The sensor is up and running properly',
      "INACTIVE": 'The sensor is registered but turned off and ignored',
      "NOT_CLAIMED": 'The sensor is registered, but so far not bound to an owner',
      "BANNED": 'The sensor is manually removed from evidence in order to keep data sanity'
    },
    valueType: ['pm10', 'pm25', 'temperature', 'humidity', 'noise']
  },
  methods: {
    toDtm: function(d) {
      var dd, re, s, ymd;
      if (!(d instanceof Date)) {
        throw `${d} is not Date()`;
      }
      dd = new Date(d - d.getTimezoneOffset() * 1000 * 60);
      ymd = dd.toISOString().slice(0, 10);
      re = /(\d\d:\d\d:\d\d) GMT([-+]\d+)/gm;
      s = re.exec(d.toString());
      return `${ymd}T${s[1]}${s[2].slice(0, 3)}:${s[2].slice(3, 5)}`;
    },
    prepareMap: function() {
      console.log([this.center.lat, this.center.lng]);
      this.map = L.map('map-id').setView([this.center.lat, this.center.lng], 12);
      // L.tileLayer 'http://{s}.tile.osm.org/{z}/{x}/{y}.png', {}
      return L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {}).addTo(this.map);
    },
    addSensorMarkers: function() {
      var i, lat, len, lng, marker, ref, results, s;
      ref = this.sensors;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        s = ref[i];
        [lat, lng] = s.position.split(',').map(function(x) {
          return parseFloat(x);
        });
        results.push(marker = L.marker([lat, lng]).addTo(this.map).bindPopup(`<table class='table-smaller-font'>\n  <tbody>\n  <tr>\n    <th class='right'>Id</th>\n    <td class='with-padding'>${s.sensorId}</td>\n  </tr>\n  <tr>\n    <th class='right'>Sensor</th>\n    <td class='with-padding'>${s.description}</td>\n  </tr>\n  <tr>\n    <th class='right'>Position</th>\n    <td class='with-padding'>${s.position}</td>\n  </tr>\n  <tr>\n    <th class='right'>Type</th>\n    <td class='with-padding'>${this.sensorType[s.type]}</td>\n  </tr>\n  <tr>\n    <th class='right'>Status</th>\n    <td class='with-padding'>${s.status}</td>\n  </tr>\n  </tbody>\n</table>`).on('click', (e) => {
          return this.openPopup;
        }));
      }
      return results;
    },
    getSensors: function() {
      var url;
      url = `https://${CITY}.pulse.eco/rest/sensor`;
      return https.get(url, (res) => {
        var body;
        body = '';
        res.on('data', function(d) {
          return body += d;
        });
        return res.on('end', () => {
          this.sensors = JSON.parse(body);
          return this.addSensorMarkers();
        });
      });
    }
  },
  created: function() {
    console.log(encodeURI(this.toDtm(new Date())));
    this.prepareMap();
    return this.getSensors();
  }
});
