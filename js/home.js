// Generated by CoffeeScript 2.3.2
// links:
// http://air.moepp.gov.mk/newmap.js
// http://air.moepp.gov.mk/graphs/site/js/draw.js

// elctron blue: #47848fed

var http, notifyOnlineStatus, vue;

http = require('http');

notifyOnlineStatus = function(e) {
  new Notification('Online status', {
    body: navigator.onLine ? 'You are online!' : 'You are offline now!',
    icon: navigator.onLine ? '../img/net-on.png' : '../img/net-off.png'
  });
  return console.log('online/offline status changed!');
};

// addEventListener 'load', notifyOnlineStatus, false
addEventListener('offline', notifyOnlineStatus, false);

addEventListener('online', notifyOnlineStatus, false);

vue = new Vue({
  el: '#app',
  data: {
    lang: {},
    parameter: 'PM10',
    parameters: [],
    map: null,
    markerIcons: [],
    markers: []
  },
  methods: {
    getLangs: function() {
      var url;
      // mk
      url = 'http://air.moepp.gov.mk/graphs/site/js/lang.mk.js';
      http.get(url, (res) => {
        var body;
        body = '';
        res.setEncoding('utf-8');
        res.on('data', function(d) {
          return body += d;
        });
        return res.on('end', () => {
          eval(body);
          return this.lang.mk = lang;
        });
      });
      // en
      url = 'http://air.moepp.gov.mk/graphs/site/js/lang.en.js';
      return http.get(url, (res) => {
        var body;
        body = '';
        res.setEncoding('utf-8');
        res.on('data', function(d) {
          return body += d;
        });
        return res.on('end', () => {
          eval(body);
          this.lang.en = lang;
          return this.parameters = Object.keys(lang.parameters);
        });
      });
    },
    prepareMap: function() {
      this.map = L.map('map-id').setView([41.58, 21.8], 8);
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {}).addTo(this.map);
      this.markerIcons = [
        L.icon({
          iconUrl: '../css/images/marker-icon-lgray.png',
          shadowUrl: '../css/images/marker-shadow.png',
          iconSize: [25,
        41],
          shadowSize: [41,
        41],
          iconAnchor: [12,
        41],
          popupAnchor: [0,
        -43]
        }),
        L.icon({
          iconUrl: '../css/images/marker-icon-green.png',
          shadowUrl: '../css/images/marker-shadow.png',
          iconSize: [25,
        41],
          shadowSize: [41,
        41],
          iconAnchor: [12,
        41],
          popupAnchor: [0,
        -43]
        }),
        L.icon({
          iconUrl: '../css/images/marker-icon-yellow.png',
          shadowUrl: '../css/images/marker-shadow.png',
          iconSize: [25,
        41],
          shadowSize: [41,
        41],
          iconAnchor: [12,
        41],
          popupAnchor: [0,
        -43]
        }),
        L.icon({
          iconUrl: '../css/images/marker-icon-orange.png',
          shadowUrl: '../css/images/marker-shadow.png',
          iconSize: [25,
        41],
          shadowSize: [41,
        41],
          iconAnchor: [12,
        41],
          popupAnchor: [0,
        -43]
        }),
        L.icon({
          iconUrl: '../css/images/marker-icon-red.png',
          shadowUrl: '../css/images/marker-shadow.png',
          iconSize: [25,
        41],
          shadowSize: [41,
        41],
          iconAnchor: [12,
        41],
          popupAnchor: [0,
        -43]
        }),
        L.icon({
          iconUrl: '../css/images/marker-icon-violet.png',
          shadowUrl: '../css/images/marker-shadow.png',
          iconSize: [25,
        41],
          shadowSize: [41,
        41],
          iconAnchor: [12,
        41],
          popupAnchor: [0,
        -43]
        })
      ];
      return null;
    },
    createMarkers: function() {
      var data, ref, results, station;
      ref = this.data;
      results = [];
      for (station in ref) {
        data = ref[station];
        results.push(((station, data) => {
          var url;
          url = "http://air.moepp.gov.mk/fetchdata.php?" + `st=${station}&` + `begin=${data.time.slice(-8)}&` + `end=${data.time.slice(-8)}&` + `parameter=${data.parameter}`;
          return http.get(url, (res) => {
            var body;
            body = '';
            res.setEncoding('utf-8');
            res.on('data', (d) => {
              return body += d;
            });
            return res.on('end', () => {
              var h, m, marker, st, status;
              status = parseInt(data.status);
              st = this.lang.mk.stations[station];
              h = JSON.parse(body);
              m = h[data.parameter][data.time.slice(-8) + "00"];
              marker = L.marker([st.lat, st.lng], {
                icon: this.markerIcons[status]
              }).addTo(this.map).bindPopup(`<b>${st.name}</b>, ${data.time.slice(-2)}:00 <br />` + `${this.lang.mk.parameters[data.parameter][0].shortName} ` + `${(!m || m === -9999 ? 'undefined' : m)} ` + `${this.lang.mk.parameters[data.parameter][0].unit} `).on('click', function(e) {
                return this.openPopup();
              });
              return this.markers.push(marker);
            });
          });
        })(station, data));
      }
      return results;
    },
    getInfo: function() {
      var url;
      url = `http://air.moepp.gov.mk/fetch.php?parameter=${this.parameter}`;
      return http.get(url, (res) => {
        var body;
        body = '';
        res.setEncoding('utf-8');
        res.on('data', function(d) {
          return body += d;
        });
        return res.on('end', () => {
          this.data = JSON.parse(body);
          console.log(this.data);
          return this.createMarkers();
        });
      });
    },
    onParameterChange: function() {
      var i, len, m, ref;
      ref = this.markers;
      for (i = 0, len = ref.length; i < len; i++) {
        m = ref[i];
        m.remove();
      }
      console.log(`Parameter changed to: ${this.parameter}`);
      this.markers = [];
      return this.getInfo();
    }
  },
  mounted: function() {
    return notifyOnlineStatus();
  },
  created: function() {
    this.prepareMap();
    this.getLangs();
    return this.getInfo();
  }
});


// TODO:
// - add coloring for table data
// - about dialog
// - make first distribution
// - add git repo, and add several commits
// - get screenshots

// DONE:
// - markers: red, green, yellow, orange, violet
// - resolved marker on-click listener
// - table data
// - offline/online trigger
