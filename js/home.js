// Generated by CoffeeScript 1.10.0
var http, notifyOnlineStatus, vue;

http = require('http');

notifyOnlineStatus = function(e) {
  new Notification('Online status', {
    body: navigator.onLine ? 'You are online!' : 'You are offline now!',
    icon: navigator.onLine ? '../img/net-on.png' : '../img/net-off.png'
  });
  return console.log('online/offline status changed!');
};

addEventListener('offline', notifyOnlineStatus, false);

addEventListener('online', notifyOnlineStatus, false);

vue = new Vue({
  el: '#app',
  data: {
    lang: {},
    parameter: 'PM10',
    parameters: [],
    map: null,
    markerIcons: [],
    markers: []
  },
  methods: {
    getLangs: function() {
      var url;
      url = 'http://air.moepp.gov.mk/graphs/site/js/lang.mk.js';
      http.get(url, (function(_this) {
        return function(res) {
          var body;
          body = '';
          res.setEncoding('utf-8');
          res.on('data', function(d) {
            return body += d;
          });
          return res.on('end', function() {
            eval(body);
            return _this.lang.mk = lang;
          });
        };
      })(this));
      url = 'http://air.moepp.gov.mk/graphs/site/js/lang.en.js';
      return http.get(url, (function(_this) {
        return function(res) {
          var body;
          body = '';
          res.setEncoding('utf-8');
          res.on('data', function(d) {
            return body += d;
          });
          return res.on('end', function() {
            eval(body);
            _this.lang.en = lang;
            return _this.parameters = Object.keys(lang.parameters);
          });
        };
      })(this));
    },
    prepareMap: function() {
      this.map = L.map('map-id').setView([41.58, 21.8], 8);
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {}).addTo(this.map);
      this.markerIcons = [
        L.icon({
          iconUrl: '../css/images/marker-icon-lgray.png',
          shadowUrl: '../css/images/marker-shadow.png',
          iconSize: [25, 41],
          shadowSize: [41, 41],
          iconAnchor: [12, 41],
          popupAnchor: [0, -43]
        }), L.icon({
          iconUrl: '../css/images/marker-icon-green.png',
          shadowUrl: '../css/images/marker-shadow.png',
          iconSize: [25, 41],
          shadowSize: [41, 41],
          iconAnchor: [12, 41],
          popupAnchor: [0, -43]
        }), L.icon({
          iconUrl: '../css/images/marker-icon-yellow.png',
          shadowUrl: '../css/images/marker-shadow.png',
          iconSize: [25, 41],
          shadowSize: [41, 41],
          iconAnchor: [12, 41],
          popupAnchor: [0, -43]
        }), L.icon({
          iconUrl: '../css/images/marker-icon-orange.png',
          shadowUrl: '../css/images/marker-shadow.png',
          iconSize: [25, 41],
          shadowSize: [41, 41],
          iconAnchor: [12, 41],
          popupAnchor: [0, -43]
        }), L.icon({
          iconUrl: '../css/images/marker-icon-red.png',
          shadowUrl: '../css/images/marker-shadow.png',
          iconSize: [25, 41],
          shadowSize: [41, 41],
          iconAnchor: [12, 41],
          popupAnchor: [0, -43]
        }), L.icon({
          iconUrl: '../css/images/marker-icon-violet.png',
          shadowUrl: '../css/images/marker-shadow.png',
          iconSize: [25, 41],
          shadowSize: [41, 41],
          iconAnchor: [12, 41],
          popupAnchor: [0, -43]
        })
      ];
      return null;
    },
    createMarkers: function() {
      var data, ref, results, station;
      ref = this.data;
      results = [];
      for (station in ref) {
        data = ref[station];
        results.push((function(_this) {
          return function(station, data) {
            var url;
            url = "http://air.moepp.gov.mk/fetchdata.php?" + ("st=" + station + "&") + ("begin=" + data.time.slice(-8) + "&") + ("end=" + data.time.slice(-8) + "&") + ("parameter=" + data.parameter);
            return http.get(url, function(res) {
              var body;
              body = '';
              res.setEncoding('utf-8');
              res.on('data', function(d) {
                return body += d;
              });
              return res.on('end', function() {
                var h, m, marker, st, status;
                status = parseInt(data.status);
                st = _this.lang.mk.stations[station];
                h = JSON.parse(body);
                m = h[data.parameter][data.time.slice(-8) + "00"];
                marker = L.marker([st.lat, st.lng], {
                  icon: _this.markerIcons[status]
                }).addTo(_this.map).bindPopup(("<b>" + st.name + "</b>, " + data.time.slice(-2) + ":00 <br />") + (_this.lang.mk.parameters[data.parameter][0].shortName + " ") + ((!m || m === -9999 ? 'undefined' : m) + " ") + (_this.lang.mk.parameters[data.parameter][0].unit + " ")).on('click', function(e) {
                  return this.openPopup();
                });
                return _this.markers.push(marker);
              });
            });
          };
        })(this)(station, data));
      }
      return results;
    },
    getInfo: function() {
      var url;
      url = "http://air.moepp.gov.mk/fetch.php?parameter=" + this.parameter;
      return http.get(url, (function(_this) {
        return function(res) {
          var body;
          body = '';
          res.setEncoding('utf-8');
          res.on('data', function(d) {
            return body += d;
          });
          return res.on('end', function() {
            _this.data = JSON.parse(body);
            console.log(_this.data);
            return _this.createMarkers();
          });
        };
      })(this));
    },
    onParameterChange: function() {
      var i, len, m, ref;
      ref = this.markers;
      for (i = 0, len = ref.length; i < len; i++) {
        m = ref[i];
        m.remove();
      }
      console.log("Parameter changed to: " + this.parameter);
      this.markers = [];
      return this.getInfo();
    }
  },
  mounted: function() {
    return notifyOnlineStatus();
  },
  created: function() {
    this.prepareMap();
    this.getLangs();
    return this.getInfo();
  }
});
