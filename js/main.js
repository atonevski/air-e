// Generated by CoffeeScript 2.3.2
var BrowserWindow, Menu, app, createWindow, debugging, dialog, electron, icon, nativeImage, path, url, win;

electron = require('electron');

path = require('path');

url = require('url');

({app, BrowserWindow, Menu, dialog, nativeImage} = electron);

// main window
// Keep a global reference of the window object, if you don't, the window will
// be closed automatically when the JavaScript object is garbage collected.
win = null;

icon = nativeImage.createFromPath(path.join(__dirname, './img/air-e.png'));

debugging = true;

createWindow = function() {
  var menu, mnutmpl;
  win = new BrowserWindow({
    width: 1000,
    height: 600,
    title: 'Air quaity',
    background: '#002b36',
    icon: './img/air-e.png'
  });
  win.loadFile('./views/home.html');
  win.maximize();
  if (process.argv[2] === '--dev') {
    win.webContents.openDevTools();
  }
  console.log(process.argv);
  // build menu
  mnutmpl = [
    {
      label: 'File',
      submenu: [
        {
          label: 'Debugging',
          accelerator: 'Ctrl+Shift+I',
          type: 'checkbox',
          checked: debugging,
          role: 'toggledevtools',
          click: function() {
            debugging = !debugging;
            return win.webContents.toggleDevTools();
          }
        },
        {
          type: 'separator'
        },
        {
          label: 'Quit',
          accelerator: 'Ctrl+Q',
          click: function() {
            return app.quit();
          }
        }
      ]
    },
    {
      label: 'View',
      submenu: [
        {
          label: 'Latest measurements',
          click: function() {
            return win.loadFile('./views/home.html');
          }
        },
        {
          type: 'separator'
        },
        {
          label: 'Measurements for period',
          click: function() {
            return win.loadFile('./views/query.html');
          }
        }
      ]
    },
    {
      label: 'SK Pulse',
      submenu: [
        {
          label: 'Sensors',
          click: function() {
            return win.loadFile('./views/skp-sensors.html');
          }
        }
      ]
    },
    {
      label: 'About',
      click: function() {
        return dialog.showMessageBox(win,
    {
          type: 'info',
          title: 'About',
          message: 'About message...',
          detail: 'Details here...',
          buttons: ['ok']
        },
    //          icon: icon
    //          icon: electron.nativeImage.createFromPath path.join __dirname, '../img/air-e.png'
    //          icon: path.join __dirname, '../img/air-e.png'
    function(btn,
    chk) {
          return console.log(btn,
    chk);
        });
      }
    }
  ];
  menu = Menu.buildFromTemplate(mnutmpl);
  Menu.setApplicationMenu(menu);
  // emitted when the window is closed
  // Dereference the window object, usually you would store windows
  // in an array if your app supports multi windows, this is the time
  // when you should delete the corresponding element.
  win.on('closed', function() {
    // close any other windows here
    return win = null;
  });
  
  // return val from createWindow()
  return null;
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', function() {
  return createWindow();
});

// process command arguments via process.argv

// create other windows here

// On macOS it's common to re-create a window in the app when the
// dock icon is clicked and there are no other windows open.
app.on('activate', function() {
  if (win === null) {
    return createWindow();
  }
});

// Quit when all windows are closed.
// On macOS it is common for applications and their menu bar
// to stay active until the user quits explicitly with Cmd + Q
app.on('window-all-closed', function() {
  if (process.platform !== 'darwin') {
    return app.quit();
  }
});

// TODO:
// load lang object from url:

// http://air.moepp.gov.mk/graphs/site/js/lang.mk.js
